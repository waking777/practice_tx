<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置业务层 -->
    <bean id="accountService" class="com.itheima.service.impl.IAccountServiceImpl">
        <property name="accountDao" ref="accountDao"></property>
    </bean>

    <!-- 配置账户的持久层-->
    <bean id="accountDao" class="com.itheima.dao.impl.AccountDaoImpl">
        <!--<property name="jdbcTemplate" ref="jdbcTemplate"></property>-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/eesy"></property>
        <property name="username" value="root"></property>
        <property name="password" value="1234"></property>
    </bean>


    <!-- spring中基于xml的声明式事务控制配置步骤
        1.配置事务管理器
        2.配置事务的通知
            此时我们需要导入事务的约束 tx的名称空间和约束，同时也需要aop的
            使用tx:Advice标签配置事务通知
                属性：
                    id：给事务通知起一个唯一标志
                    transaction-manager：给事务通知提供一个事务管理器引用
        3.配置aop的切入点表达式
        4.建立事务通知和切入点表达式的对应关系
        5.配置事务的属性
            是在事务的通知tx:Advice标签的内部

     -->
    <!--配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--配置事务的通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--配置事务的属性
            isolation             用于指定事务的隔离级别，默认值是default，表示使用数据库的默认隔离级别
            no-rollback-for
            propagation          用于指定事务的传播行为。默认值是required，表示一定会有事务
            read-only
            rollback-for
            timeout
         -->
        <tx:attributes>
            <tx:method name="transfer"/>
        </tx:attributes>
    </tx:advice>


    <!--配置aop -->
    <aop:config>
        <!--配置切入点表达式 -->
        <aop:pointcut id="pt1" expression="* com.itheima.service.impl.*.*(..)"></aop:pointcut>
        <!-- 建立切入点表达式和事务通知的对应关系-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt1"></aop:advisor>
    </aop:config>




</beans>